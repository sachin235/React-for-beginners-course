{"version":3,"sources":["components/About.js","components/Home.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","className","href","Component","Home","Navbar","class","react_router_dom","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","App","Navbar_Navbar","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAEqBA,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,WAFF,mDAIEF,EAAAC,EAAAC,cAAA,WAJF,mBAKkBF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,+BAAR,gBARWC,aCAdC,mLAEjB,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBADF,qBAEoBF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,8BAAR,wBALQC,aCCbE,mLAEjB,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKM,MAAM,iDACTR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,IAAIF,MAAM,eAAeJ,KAAK,KACrCJ,EAAAC,EAAAC,cAAA,oBAEFF,EAAAC,EAAAC,cAAA,UACEM,MAAM,iBACNG,KAAK,SACLC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEXhB,EAAAC,EAAAC,cAAA,QAAMM,MAAM,yBAEdR,EAAAC,EAAAC,cAAA,OAAKM,MAAM,2BAA2BS,GAAG,aACvCjB,EAAAC,EAAAC,cAAA,MAAIM,MAAM,cACRR,EAAAC,EAAAC,cAAA,MAAIM,MAAM,mBACRR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,IAAIF,MAAM,WAAWJ,KAAK,KAAnC,QACOJ,EAAAC,EAAAC,cAAA,QAAMM,MAAM,WAAZ,eAGTR,EAAAC,EAAAC,cAAA,MAAIM,MAAM,YACRR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,SAASF,MAAM,WAAWJ,KAAK,KAAxC,qBA3BoBC,aCmBrBa,MAff,WACE,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjB,IACjCN,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,GAAGC,UAAWjB,IAChCN,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWxB,QCH5ByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.64c82d08.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class About extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"lead\">\r\n        <h1>About me</h1>\r\n        <br />\r\n        Hi I'm Anant Rungta - an open source Enthusuast.\r\n        <br />\r\n        See my projects <a href=\"https://github.com/Anant016\">here</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Home</h1>\r\n        Hello guys. Visit <a href=\"https://anant-dev.web.app/\">my portfolio</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n          <Link to=\"/\" class=\"navbar-brand\" href=\"#\">\r\n            <b>Resume</b>\r\n          </Link>\r\n          <button\r\n            class=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n            aria-controls=\"navbarNav\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span class=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul class=\"navbar-nav\">\r\n              <li class=\"nav-item active\">\r\n                <Link to=\"/\" class=\"nav-link\" href=\"#\">\r\n                  Home <span class=\"sr-only\">(current)</span>\r\n                </Link>\r\n              </li>\r\n              <li class=\"nav-item\">\r\n                <Link to=\"/about\" class=\"nav-link\" href=\"#\">\r\n                  About\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport About from \"./components/About\";\nimport Home from \"./components/Home\";\nimport Navbar from \"./components/Navbar\";\n\nfunction App() {\n  return (\n    <div className=\"lead \">\n      <Router>\n        <Navbar />\n        <div className=\"mt-5 container\">\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"\" component={Home} />\n          <Route exact path=\"/about\" component={About} />\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}